import streamlit as st
import pandas as pd
import numpy as np
from utils import IsidoraReport, clean_headers, summarize_data
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
st.set_page_config(
    page_title="–ò–°–ò–î–û–†–ê –ê–ª–∞—Ç–∫–∞ –∑–∞ –ò–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å–ª–æ–≤ –∏ –æ–ø–∏—Å
st.title("–ò–°–ò–î–û–†–ê –ê–ª–∞—Ç–∫–∞ –∑–∞ –ò–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ")
st.markdown("""
    –û–≤–∞–∞ –∞–ª–∞—Ç–∫–∞ –æ–≤–æ–∑–º–æ–∂—É–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ò–°–ò–î–û–†–ê —Å–∏—Å—Ç–µ–º–æ—Ç –∑–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ.
    –ú–æ–º–µ–Ω—Ç–∞–ª–Ω–æ –ø–æ–¥–¥—Ä–∂—É–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø–∞–∫–µ—Ç–æ—Ç –•–í (—Ö–∞—Ä—Ç–∏–∏ –æ–¥ –≤—Ä–µ–¥–Ω–æ—Å—Ç).
""")

# –ò–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∞—Ü–∏—ò–∞ –Ω–∞ —Å–µ—Å–∏—Å–∫–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏
if 'isidora_report' not in st.session_state:
    st.session_state.isidora_report = IsidoraReport()

# –°—Ç—Ä–∞–Ω–∏—á–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏
with st.sidebar:
    st.header("üìä –ö–æ–Ω—Ç—Ä–æ–ª–∏")
    
    # –ü—Ä–∏–∫–∞—á—É–≤–∞—ö–µ –Ω–∞ –¥–∞—Ç–æ—Ç–µ–∫–∞
    uploaded_file = st.file_uploader(
        "–ü—Ä–∏–∫–∞—á–µ—Ç–µ Excel –¥–∞—Ç–æ—Ç–µ–∫–∞",
        type=["xlsx"],
        help="–ò–∑–±–µ—Ä–µ—Ç–µ Excel –¥–∞—Ç–æ—Ç–µ–∫–∞ —Å–æ –ò–°–ò–î–û–†–ê –ø–æ–¥–∞—Ç–æ—Ü–∏"
    )

    if uploaded_file:
        try:
            # –í—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –ª–∏—Å—Ç–æ–≤–∏
            xls = pd.ExcelFile(uploaded_file)
            sheet_names = xls.sheet_names
            
            # –ò–∑–±–æ—Ä –Ω–∞ –ª–∏—Å—Ç
            selected_sheet = st.selectbox(
                "–ò–∑–±–µ—Ä–µ—Ç–µ –ª–∏—Å—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑–∞",
                sheet_names,
                help="–ò–∑–±–µ—Ä–µ—Ç–µ –∫–æ—ò –ª–∏—Å—Ç –æ–¥ Excel –¥–∞—Ç–æ—Ç–µ–∫–∞—Ç–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ –≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞—Ç–µ"
            )
            
            # –í—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏
            st.session_state.isidora_report.load_data(uploaded_file, selected_sheet)
            st.success(f"–£—Å–ø–µ—à–Ω–æ –≤—á–∏—Ç–∞–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ª–∏—Å—Ç–æ—Ç {selected_sheet}")
            
            # –§–∏–ª—Ç—Ä–∏
            st.subheader("üîç –§–∏–ª—Ç—Ä–∏")
            
            # –î–∞—Ç—É–º—Å–∫–∏ —Ñ–∏–ª—Ç–µ—Ä
            date_cols = [col for col in st.session_state.isidora_report.data.columns 
                        if '–¥–∞—Ç—É–º' in str(col).lower()]
            if date_cols:
                try:
                    date_col = date_cols[0]
                    min_date = pd.to_datetime(st.session_state.isidora_report.data[date_col].min())
                    max_date = pd.to_datetime(st.session_state.isidora_report.data[date_col].max())
                    
                    date_range = st.date_input(
                        "–ü–µ—Ä–∏–æ–¥ –Ω–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ",
                        value=(min_date.date(), max_date.date()),
                        min_value=min_date.date(),
                        max_value=max_date.date()
                    )
                except Exception as e:
                    st.warning(f"–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø–æ—Å—Ç–∞–≤–∏ –¥–∞—Ç—É–º—Å–∫–∏ —Ñ–∏–ª—Ç–µ—Ä: {str(e)}")
                    date_range = None
            
            # –§–∏–ª—Ç–µ—Ä –∑–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—á
            reporter_col = next((col for col in st.session_state.isidora_report.data.columns 
                               if '–∏–∑–≤–µ—Å—Ç—É–≤–∞—á' in str(col).lower()), None)
            if reporter_col:
                reporter_names = sorted(st.session_state.isidora_report.data[reporter_col].dropna().unique())
                selected_reporter = st.selectbox(
                    "–ò–∑–≤–µ—Å—Ç—É–≤–∞—á",
                    ["–°–∏—Ç–µ"] + reporter_names
                )
            
            # –§–∏–ª—Ç–µ—Ä –∑–∞ —Ç–∏–ø –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument_col = next((col for col in st.session_state.isidora_report.data.columns 
                                 if '–≤–∏–¥' in str(col).lower() and '—Ö.–≤.' in str(col).lower()), None)
            if instrument_col:
                instrument_types = sorted(st.session_state.isidora_report.data[instrument_col].dropna().unique())
                selected_instrument = st.selectbox(
                    "–¢–∏–ø –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                    ["–°–∏—Ç–µ"] + instrument_types
                )
            
            # –ö–æ–ø—á–µ –∑–∞ –∏–∑–≤–æ–∑
            if st.button("üì• –ò–∑–≤–µ–∑–∏ –≤–æ Excel"):
                try:
                    filtered_data = st.session_state.isidora_report.data.copy()
                    if 'date_range' in locals() and date_range and len(date_range) == 2:
                        filtered_data = st.session_state.isidora_report.filter_by_date(
                            pd.Timestamp(date_range[0]),
                            pd.Timestamp(date_range[1])
                        )
                    if 'selected_reporter' in locals() and selected_reporter != "–°–∏—Ç–µ":
                        filtered_data = st.session_state.isidora_report.filter_by_reporter(selected_reporter)
                    
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    export_filename = f"isidora_–∏–∑–≤–µ—à—Ç–∞—ò_{timestamp}.xlsx"
                    st.session_state.isidora_report.export_report(export_filename)
                    st.success(f"–ò–∑–≤–µ—à—Ç–∞—ò–æ—Ç –µ –∑–∞—á—É–≤–∞–Ω –∫–∞–∫–æ {export_filename}")
                except Exception as e:
                    st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–æ–∑ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ: {str(e)}")
            
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ: {str(e)}")

# –ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ –≤–∏–∑—É–µ–ª–∏–∑–∞—Ü–∏—ò–∞
if hasattr(st.session_state, 'isidora_report') and st.session_state.isidora_report.data is not None:
    try:
        # –ü—Ä–∏–º–µ–Ω—É–≤–∞—ö–µ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏
        filtered_data = st.session_state.isidora_report.data.copy()
        
        # –ö—Ä–µ–∏—Ä–∞—ö–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∏ –∑–∞ –≤–∏–∑—É–µ–ª–∏–∑–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            # –î–∏—Å—Ç—Ä–∏–±—É—Ü–∏—ò–∞ –ø–æ —Ç–∏–ø –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument_col = next((col for col in filtered_data.columns 
                                 if '–≤–∏–¥' in str(col).lower() and '—Ö.–≤.' in str(col).lower()), None)
            if instrument_col:
                st.subheader("üìä –î–∏—Å—Ç—Ä–∏–±—É—Ü–∏—ò–∞ –ø–æ —Ç–∏–ø –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
                instrument_counts = filtered_data[instrument_col].value_counts()
                if not instrument_counts.empty:
                    fig = px.pie(
                        values=instrument_counts.values,
                        names=instrument_counts.index.astype(str),
                        title='–î–∏—Å—Ç—Ä–∏–±—É—Ü–∏—ò–∞ –Ω–∞ —Ö–∞—Ä—Ç–∏–∏ –æ–¥ –≤—Ä–µ–¥–Ω–æ—Å—Ç –ø–æ —Ç–∏–ø'
                    )
                    st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # –¢–æ–ø –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏
            reporter_col = next((col for col in filtered_data.columns 
                               if '–∏–∑–≤–µ—Å—Ç—É–≤–∞—á' in str(col).lower()), None)
            if reporter_col:
                st.subheader("üìà –¢–æ–ø –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏")
                # –ß–∏—Å—Ç–µ—ö–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –∑–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏
                reporter_data = filtered_data[reporter_col].dropna()
                if not reporter_data.empty:
                    reporter_counts = reporter_data.value_counts().head(10)
                    reporter_df = pd.DataFrame({
                        '–ò–∑–≤–µ—Å—Ç—É–≤–∞—á': reporter_counts.index.astype(str),
                        '–ë—Ä–æ—ò': reporter_counts.values
                    })
                    
                    fig = px.bar(
                        reporter_df,
                        x='–ë—Ä–æ—ò',
                        y='–ò–∑–≤–µ—Å—Ç—É–≤–∞—á',
                        orientation='h',
                        title='–¢–æ–ø 10 –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏ –ø–æ –±—Ä–æ—ò –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏'
                    )
                    fig.update_layout(
                        yaxis={'categoryorder': 'total ascending'},
                        showlegend=False
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("–ù–µ–º–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏ –∑–∞ –ø—Ä–∏–∫–∞–∑")
        
        # –¢–∞–±–µ–ª–∞ —Å–æ –ø–æ–¥–∞—Ç–æ—Ü–∏
        st.subheader("üìã –î–µ—Ç–∞–ª–µ–Ω –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏")
        
        # –ò–∑–±–æ—Ä –Ω–∞ –∫–æ–ª–æ–Ω–∏ –∑–∞ –ø—Ä–∏–∫–∞–∑
        all_columns = list(filtered_data.columns)
        selected_columns = st.multiselect(
            "–ò–∑–±–µ—Ä–µ—Ç–µ –∫–æ–ª–æ–Ω–∏ –∑–∞ –ø—Ä–∏–∫–∞–∑:",
            all_columns,
            default=all_columns[:5] if len(all_columns) > 5 else all_columns
        )
        
        if selected_columns:
            st.dataframe(
                filtered_data[selected_columns],
                height=400,
                use_container_width=True
            )
        
        # –°—É–º–∞—Ä–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—É–º–∞—Ä–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        try:
            summary = summarize_data(filtered_data)
            
            # –ü—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ç–∞ –≤–æ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∏
            summary_col1, summary_col2, summary_col3 = st.columns(3)
            
            with summary_col1:
                st.metric("–í–∫—É–ø–Ω–æ –∑–∞–ø–∏—Å–∏", f"{summary.get('–≤–∫—É–ø–Ω–æ_–∑–∞–ø–∏—Å–∏', 0):,}")
            
            with summary_col2:
                st.metric("–ë—Ä–æ—ò –Ω–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏", f"{summary.get('–±—Ä–æ—ò_–∏–∑–≤–µ—Å—Ç—É–≤–∞—á–∏', 0):,}")
            
            with summary_col3:
                st.metric("–ë—Ä–æ—ò –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", f"{summary.get('–±—Ä–æ—ò_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏', 0):,}")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ—Å–º–µ—Ç—É–≤–∞—ö–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ç–∞: {str(e)}")

        # –ü—Ä–≤ –¢–µ—Å—Ç –ü–∞–∫–µ—Ç —Å–µ–∫—Ü–∏—ò–∞ (—Å–∞–º–æ –∑–∞ –ª–∏—Å—Ç–æ—Ç '–ü—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ ')
        if 'selected_sheet' in locals() and selected_sheet.strip() == '–ü—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏':
            from utils import prepare_sostojba_na_hv
            if st.button("–ü—Ä–≤ –¢–µ—Å—Ç –ü–∞–∫–µ—Ç"):
                st.subheader("üì¶ –ü—Ä–≤ –¢–µ—Å—Ç –ü–∞–∫–µ—Ç")
                try:
                    result = prepare_sostojba_na_hv(filtered_data)
                    table_data = {
                        "–°–æ—Å—Ç–æ—ò–±–∞ –Ω–∞ —Ö.–≤ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–≥–ª–∞–≤–Ω–∏–Ω–∞)": [
                            "–ó–±–∏—Ä –Ω–∞ –∏–∑–Ω–æ—Å–∏ —Å–æ DRVR, DSK, PRM, POBJ",
                            f"{result['sum_in_denars']:,} –¥–µ–Ω–∞—Ä–∏",
                            ", ".join(result["used_types"])
                        ],
                        "–ù–µ—Ç–æ —Ç—Ä–∞–Ω—Å–∞–∫—Ü–∏–∏": ["‚è≥ Yet"] * 3,
                        "–¶–µ–Ω–æ–≤–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏": ["‚è≥ Yet"] * 3,
                        "–ö—É—Ä—Å–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏": ["‚è≥ Yet"] * 3,
                        "–û—Å—Ç–∞–Ω–∞—Ç–∏ –ø—Ä–æ–º–µ–Ω–∏": ["‚è≥ Yet"] * 3,
                        "–°–æ—Å—Ç–æ—ò–±–∞ –Ω–∞ —Ö.–≤ –Ω–∞ –∫—Ä–∞—ò –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–≥–ª–∞–≤–Ω–∏–Ω–∞)": ["‚è≥ Yet"] * 3
                    }
                    df_table = pd.DataFrame(table_data, index=["Rule", "–ò–∑–Ω–æ—Å –≤–æ –¥–µ–Ω–∞—Ä–∏", "–í–∏–¥ –Ω–∞ –∏–∑–Ω–æ—Å"])
                    st.table(df_table)
                except Exception as e:
                    error_table = pd.DataFrame({
                        col: ["‚ùå Error"] * 3 for col in [
                            "–°–æ—Å—Ç–æ—ò–±–∞ –Ω–∞ —Ö.–≤ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–≥–ª–∞–≤–Ω–∏–Ω–∞)",
                            "–ù–µ—Ç–æ —Ç—Ä–∞–Ω—Å–∞–∫—Ü–∏–∏",
                            "–¶–µ–Ω–æ–≤–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏",
                            "–ö—É—Ä—Å–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏",
                            "–û—Å—Ç–∞–Ω–∞—Ç–∏ –ø—Ä–æ–º–µ–Ω–∏",
                            "–°–æ—Å—Ç–æ—ò–±–∞ –Ω–∞ —Ö.–≤ –Ω–∞ –∫—Ä–∞—ò –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–≥–ª–∞–≤–Ω–∏–Ω–∞)"
                        ]
                    }, index=["Rule", "–ò–∑–Ω–æ—Å –≤–æ –¥–µ–Ω–∞—Ä–∏", "–í–∏–¥ –Ω–∞ –∏–∑–Ω–æ—Å"])
                    st.table(error_table)
    
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ: {str(e)}")
