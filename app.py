import streamlit as st
import pandas as pd
from utils import clean_headers
from data_processing import process_first_packet

# --- Streamlit App Config ---
st.set_page_config(
    page_title="–ò–°–ò–î–û–†–ê Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Sidebar: File Upload and Sheet Selection Only ---
st.sidebar.header("üìä –ü–æ–¥–∞—Ç–æ—Ü–∏")

uploaded_file = st.sidebar.file_uploader(
    "–ü—Ä–∏–∫–∞—á–µ—Ç–µ Excel –¥–∞—Ç–æ—Ç–µ–∫–∞",
    type=["xlsx"],
    help="–ò–∑–±–µ—Ä–µ—Ç–µ Excel –¥–∞—Ç–æ—Ç–µ–∫–∞ —Å–æ –ò–°–ò–î–û–†–ê –ø–æ–¥–∞—Ç–æ—Ü–∏"
)

selected_sheet = None
sheet_names = []
data_loaded = False

df = None
if uploaded_file:
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_names = xls.sheet_names
        default_sheet = next((s for s in sheet_names if s.strip().lower() == "–ø—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏".lower()), sheet_names[0])
        selected_sheet = st.sidebar.selectbox(
            "–ò–∑–±–µ—Ä–µ—Ç–µ –ª–∏—Å—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑–∞",
            sheet_names,
            index=sheet_names.index(default_sheet)
        )
        df = pd.read_excel(uploaded_file, sheet_name=selected_sheet)
        data_loaded = True
        st.sidebar.success(f"–£—Å–ø–µ—à–Ω–æ –≤—á–∏—Ç–∞–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ª–∏—Å—Ç–æ—Ç: {selected_sheet}")
    except Exception as e:
        st.sidebar.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ: {str(e)}")

# --- Main Area ---
st.title("–ò–°–ò–î–û–†–ê Dashboard")
st.markdown("""
–û–≤–∞–∞ –∞–ª–∞—Ç–∫–∞ –æ–≤–æ–∑–º–æ–∂—É–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ò–°–ò–î–û–†–ê —Å–∏—Å—Ç–µ–º–æ—Ç –∑–∞ –∏–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ. 
**'–ü—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ '** –µ –≥–ª–∞–≤–Ω–∏–æ—Ç –ª–∏—Å—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑–∞. –ó–∞ –¥—Ä—É–≥–∏—Ç–µ –ª–∏—Å—Ç–æ–≤–∏, –¥–æ—Å—Ç–∞–ø–µ–Ω –µ —Å–∞–º–æ —Ç–∞–±–µ–ª–∞—Ä–µ–Ω –ø—Ä–∏–∫–∞–∑.
""")

if not data_loaded:
    st.info("üìÇ –ü—Ä–∏–∫–∞—á–µ—Ç–µ .xlsx –¥–∞—Ç–æ—Ç–µ–∫–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ.")
    st.stop()

# --- If not '–ü—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ ', show only table ---
if selected_sheet.strip().lower() != "–ø—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏":
    st.subheader(f"–¢–∞–±–µ–ª–∞—Ä–µ–Ω –ø—Ä–∏–∫–∞–∑ –∑–∞ –ª–∏—Å—Ç–æ—Ç: {selected_sheet}")
    st.dataframe(df, use_container_width=True, height=500)
    st.info("–ó–∞ –Ω–∞–ø—Ä–µ–¥–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞, –∏–∑–±–µ—Ä–µ—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ '")
    st.stop()

# --- First Packet: Show by default ---
with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏..."):
    try:
        processed_df = process_first_packet(uploaded_file)
        if processed_df is not None and not processed_df.empty:
            st.subheader("üìã First Packet")
            st.dataframe(processed_df, use_container_width=True, height=600)
            # Download button
            csv = processed_df.to_csv(index=False).encode('utf-8-sig')
            st.download_button(
                label="‚¨áÔ∏è –ü—Ä–µ–∑–µ–º–∏ –∫–∞–∫–æ CSV",
                data=csv,
                file_name="first_packet.csv",
                mime="text/csv"
            )
    except Exception as e:
        st.error(f"Error processing First Packet: {str(e)}")

# --- Button to show all columns from the original Excel sheet ---
if st.button("üìã –ü—Ä–∏–∫–∞–∂–∏ –≥–∏ —Å–∏—Ç–µ –∫–æ–ª–æ–Ω–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏)"):
    st.subheader("üìã –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ (—Å–∏—Ç–µ –∫–æ–ª–æ–Ω–∏)")
    st.dataframe(df, use_container_width=True, height=600)